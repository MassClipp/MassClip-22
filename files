/import { db } from "@/lib/firebase"
import { doc, getDoc } from "firebase/firestore"

export interface SubscriptionData {
  isActive: boolean
  plan: "free" | "pro" | "creator_pro"
  stripeCustomerId?: string
  stripeSubscriptionId?: string
  currentPeriodEnd?: Date
  features: {
    unlimitedDownloads: boolean
    premiumContent: boolean
    noWatermark: boolean
    prioritySupport: boolean
    platformFeePercentage: number
    maxVideosPerBundle: number | null
    maxBundles: number | null
  }
}

// Defaults for free tier
const FREE_DEFAULTS = {
  unlimitedDownloads: false,
  premiumContent: false,
  noWatermark: false,
  prioritySupport: false,
  platformFeePercentage: 20,
  maxVideosPerBundle: 10,
  maxBundles: 2,
}

async function fetchMembership(userId: string) {
  try {
    const snap = await getDoc(doc(db, "memberships", userId))
    if (!snap.exists()) return null
    return snap.data() as any
  } catch (e) {
    console.warn("[subscription] memberships lookup failed, falling back:", e)
    return null
  }
}

export async function checkSubscription(userId?: string): Promise<SubscriptionData> {
  try {
    if (!userId) {
      return {
        isActive: false,
        plan: "free",
        features: { ...FREE_DEFAULTS },
      }
    }

    // 0) Prefer central memberships
    const membership = await fetchMembership(userId)
    if (membership) {
      const isProActive =
        (membership.plan === "creator_pro") &&
        (membership.isActive === true || membership.status === "active" || membership.status === "trialing")

      if (isProActive) {
        const currentPeriodEnd = membership.currentPeriodEnd
          ? (membership.currentPeriodEnd.toDate?.() ?? new Date(membership.currentPeriodEnd))
          : undefined

        return {
          isActive: true,
          plan: "creator_pro",
          stripeCustomerId: membership.stripeCustomerId,
          stripeSubscriptionId: membership.stripeSubscriptionId,
          currentPeriodEnd,
          features: {
            unlimitedDownloads: true,
            premiumContent: true,
            noWatermark: true,
            prioritySupport: true,
            platformFeePercentage: 10,
            maxVideosPerBundle: null,
            maxBundles: null,
          },
        }
      } else {
        // Free membership with stored caps if provided
        const f = membership.features || {}
        return {
          isActive: false,
          plan: "free",
          features: {
            unlimitedDownloads: !!f.unlimitedDownloads || false,
            premiumContent: !!f.premiumContent || false,
            noWatermark: !!f.noWatermark || false,
            prioritySupport: !!f.prioritySupport || false,
            platformFeePercentage:
              typeof f.platformFeePercentage === "number" ? f.platformFeePercentage : FREE_DEFAULTS.platformFeePercentage,
            maxVideosPerBundle:
              typeof f.maxVideosPerBundle === "number" || f.maxVideosPerBundle === null
                ? f.maxVideosPerBundle
                : FREE_DEFAULTS.maxVideosPerBundle,
            maxBundles:
              typeof f.maxBundles === "number" || f.maxBundles === null
                ? f.maxBundles
                : FREE_DEFAULTS.maxBundles,
          },
        }
      }
    }

    // 1) Legacy: creatorProUsers
    const proSnap = await getDoc(doc(db, "creatorProUsers", userId))
    if (proSnap.exists()) {
      const data = proSnap.data() as any
      const isActive = (data.subscriptionStatus ?? "inactive") === "active"
      if (isActive) {
        const renewal = data.renewalDate
        const currentPeriodEnd = renewal?.toDate?.() ?? (typeof renewal === "number" ? new Date(renewal) : renewal)
        return {
          isActive: true,
          plan: "creator_pro",
          stripeCustomerId: data.stripeCustomerId,
          stripeSubscriptionId: data.subscriptionId,
          currentPeriodEnd,
          features: {
            unlimitedDownloads: true,
            premiumContent: true,
            noWatermark: true,
            prioritySupport: true,
            platformFeePercentage: 10,
            maxVideosPerBundle: null,
            maxBundles: null,
          },
        }
      }
    }

    // 2) Legacy: freeUsers
    const freeSnap = await getDoc(doc(db, "freeUsers", userId))
    if (freeSnap.exists()) {
      const data = freeSnap.data() as any
      const platformFeePercentage =
        typeof data.platformFeePercentage === "number" ? data.platformFeePercentage : FREE_DEFAULTS.platformFeePercentage
      const maxVideosPerBundle =
        typeof data.maxVideosPerBundle === "number" ? data.maxVideosPerBundle : FREE_DEFAULTS.maxVideosPerBundle
      const maxBundles = typeof data.bundlesLimit === "number" ? data.bundlesLimit : FREE_DEFAULTS.maxBundles

      return {
        isActive: false,
        plan: "free",
        features: {
          unlimitedDownloads: false,
          premiumContent: false,
          noWatermark: false,
          prioritySupport: false,
          platformFeePercentage,
          maxVideosPerBundle,
          maxBundles,
        },
      }
    }

    // 3) Default free
    return {
      isActive: false,
      plan: "free",
      features: { ...FREE_DEFAULTS },
    }
  } catch (error) {
    console.error("Error checking subscription (tier lookup):", error)
    return {
      isActive: false,
      plan: "free",
      features: { ...FREE_DEFAULTS },
    }
  }
}

export function getSubscriptionFeatures(plan: string) {
  switch (plan) {
    case "pro":
    case "creator_pro":
      return {
        unlimitedDownloads: true,
        premiumContent: true,
        noWatermark: true,
        prioritySupport: true,
        platformFeePercentage: 10,
        maxVideosPerBundle: null,
        maxBundles: null,
      }
    default:
      return { ...FREE_DEFAULTS }
  }
}

export function getPlatformFeePercentage(plan: string): number {
  return plan === "pro" || plan === "creator_pro" ? 10 : 20
}

export function calculatePlatformFee(amount: number, plan: string): number {
  const feePercentage = getPlatformFeePercentage(plan)
  return Math.round((amount * feePercentage) / 100)
}

export function calculateCreatorEarnings(amount: number, plan: string): number {
  const platformFee = calculatePlatformFee(amount, plan)
  return amount - platformFee
}

export function getMaxVideosPerBundle(plan: string): number | null {
  return plan === "pro" || plan === "creator_pro" ? null : FREE_DEFAULTS.maxVideosPerBundle
}

export function getMaxBundles(plan: string): number | null {
  return plan === "pro" || plan === "creator_pro" ? null : FREE_DEFAULTS.maxBundles
}

export function canAddVideoToBundle(currentVideoCount: number, plan: string): boolean {
  const maxVideos = getMaxVideosPerBundle(plan)
  if (maxVideos === null) return true
  return currentVideoCount < maxVideos
}

export function canCreateBundle(currentBundleCount: number, plan: string): boolean {
  const maxBundles = getMaxBundles(plan)
  if (maxBundles === null) return true
  return currentBundleCount < maxBundles
}
