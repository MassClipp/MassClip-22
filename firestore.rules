rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to all authenticated users for debugging purposes
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // User profile data
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their own profile - more permissive rule
      allow create: if request.auth != null;
      
      // Allow users to update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read and write their own favorites
      match /favorites/{favoriteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow users to read and write their own history
      match /history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Username collection for uniqueness checks
    match /usernames/{username} {
      // Allow reading usernames to check availability
      allow read: if true;
      
      // Allow creating a username document - more permissive rule
      allow create: if request.auth != null;
    }
    
    // Creator profiles
    match /creators/{username} {
      // Allow reading creator profiles
      allow read: if true;
      
      // Allow creating a creator profile - more permissive rule
      allow create: if request.auth != null;
      
      // Allow updating a creator profile
      allow update: if request.auth != null;
    }
    
    // Function to check if a user has reached their download limit
    function hasReachedDownloadLimit(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.plan == 'free' && user.downloads >= 15;
    }
    
    // Function to check if it's a new month since last reset
    function isNewMonth(userId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      let lastReset = user.lastReset.toMillis();
      let lastResetDate = new DateTime(lastReset);
      let now = request.time;
      
      return lastResetDate.getMonth() != now.getMonth() || 
             lastResetDate.getYear() != now.getYear();
    }
  }
}
